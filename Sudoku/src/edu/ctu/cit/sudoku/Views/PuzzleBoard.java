/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ctu.cit.sudoku.Views;

import edu.ctu.cit.sudoku.Models.Puzzle;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 *
 * @author charlie
 */
public class PuzzleBoard extends javax.swing.JPanel {

    private final PuzzleCell[][] grid = new PuzzleCell[Puzzle.BOARD_SIZE][Puzzle.BOARD_SIZE];
    private final NumberChooser numberChooser = new NumberChooser();

    private PuzzleCell selectedPuzzleCell = null;
    private Puzzle puzzle = null;

    /**
     * Creates new form PuzzleBoard
     */
    public PuzzleBoard() {
        initComponents();
        addPuzzleCells();
    }

    private void addPuzzleCells() {
        GridLayout layout = new GridLayout(Puzzle.BOARD_SIZE, Puzzle.BOARD_SIZE);
        this.setLayout(layout);

        for (int i = 0; i < Puzzle.BOARD_SIZE; i++) {
            for (int j = 0; j < Puzzle.BOARD_SIZE; j++) {
                grid[i][j] = new PuzzleCell();
                final PuzzleCell finalGridIJ = grid[i][j];
                grid[i][j].setOnPuzzleCellClicked(new PuzzleCell.OnPuzzleCellClicked() {
                    @Override
                    public void onPuzzleCellClicked(PuzzleCell cell) {
                        if (selectedPuzzleCell != null) {
                            selectedPuzzleCell.changeState(PuzzleCell.STATE_ENABLE);
                        }
                        finalGridIJ.changeState(PuzzleCell.STATE_SELECTED);
                        selectedPuzzleCell = finalGridIJ;

                        PuzzleBoard.this.numberChooser.setLocation(cell.getCurrentLocation());
                        PuzzleBoard.this.numberChooser.setVisible(true);
                    }
                });
                this.add(grid[i][j]);
            }
        }
    }

    public void setPuzzle(Puzzle puzzle) {
        this.puzzle = puzzle;
        for (int i = 0; i < Puzzle.BOARD_SIZE; i++) {
            for (int j = 0; j < Puzzle.BOARD_SIZE; j++) {
                if (puzzle.get(i, j) != 0) {
                    grid[i][j].setText("" + puzzle.get(i, j));
                    grid[i][j].changeState(PuzzleCell.STATE_DISABLE);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
